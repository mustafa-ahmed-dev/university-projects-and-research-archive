// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Doctype {
  COLLEGE
  DEPARTMENT
  STUDY_LEVEL
  ADMIN
  PERMISSION
  SUPERVISOR
  PROJECT
  KEYWORD
  DOCUMENT
  FIELD
  PROJECT_FIELD
  STUDENT
}

model College {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(50)

  // College 1:M Department
  Departments Department[]

  @@map("colleges")
}

model Department {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(60)

  // College 1:M Department
  College   College @relation(fields: [collegeId], references: [id])
  collegeId String  @map("college_id") @db.Uuid

  // Department 1:M Supervisor
  Supervisors Supervisor[]

  // Department 1:M StudyLevel
  StudyLevels StudyLevel[]

  @@unique([name, collegeId])
  @@map("departments")
}

model StudyLevel {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(255)

  // Department 1:M StudyLevel
  Department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.Uuid

  // StudyLevel 1:M Project
  Projects Project[]

  // StudyLevel 1:M Student
  Student Student[]

  @@map("study_level")
}

model Person {
  id       String @id @default(uuid()) @db.Uuid
  fullName String @map("full_name")
  gender   Gender

  // Person 1:1 Superivsor
  Supervisor Supervisor?

  // Person 1:1 Admin
  Admin Admin?

  @@map("people")
}

model Admin {
  id          String   @id @default(uuid()) @db.Uuid
  username    String   @unique @db.VarChar(255)
  password    String   @db.Char(90)
  token       String   @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  // Person 1:1 Admin
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId String @unique @map("person_id") @db.Uuid

  // Admin 1:M Permission
  Permissions Permission[]

  @@map("admins")
}

model Permission {
  id         String  @id @default(uuid()) @db.Uuid
  actionType Action  @default(READ) @map("action_type")
  doctype    Doctype @default(COLLEGE)

  // Admin 1:M Permission
  Admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String @map("college_id") @db.Uuid

  @@unique([actionType, doctype, adminId])
  @@map("permissions")
}

model Supervisor {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique @db.VarChar(255)

  // Department 1:M Supervisor
  Department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @map("department_id") @db.Uuid

  // Person 1:1 Supervisor
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId String @unique @map("person_id") @db.Uuid

  // Supervisor 1:M Project
  Projects Project[]

  @@map("supervisors")
}

model Project {
  id          String @id @default(uuid()) @db.Uuid
  rate        Float
  description String @db.VarChar(255)

  // StudyLevel 1:M Project
  StudyLevel   StudyLevel @relation(fields: [studyLevelId], references: [id])
  studyLevelId String     @map("study_leve_id") @db.Uuid

  // Supevrvisor 1:M Project
  Supervisor   Supervisor @relation(fields: [supervisorId], references: [id])
  supervisorId String     @map("supervisor_id") @db.Uuid

  // Project 1:M Student
  Students Student[]

  // Project 1:M ProjectField
  ProjectFields ProjectField[]

  // Project 1:M Keyword
  Keywords Keyword[]

  // Project 1:M Documents
  Documents Document[]

  @@map("projects")
}

model Keyword {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(255)

  // Project 1:M Keyword
  Project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id") @db.Uuid

  @@map("keywords")
}

model Document {
  id           String @id @default(uuid()) @db.Uuid
  caption      String @db.VarChar(255)
  originalName String @map("original_name") @db.VarChar(255)
  path         String @unique @db.VarChar(255)
  mimeType     String @map("mime_type") @db.VarChar(255)
  size         Int

  Project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id") @db.Uuid

  @@map("documents")
}

model Field {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(255)

  // Field 1:M ProjectField
  ProjectFields ProjectField[]

  @@map("fields")
}

model ProjectField {
  id String @id @default(uuid()) @db.Uuid

  // Project 1:M ProjectField
  Project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id") @db.Uuid

  // Field 1:M ProjectField
  Field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String @map("field_id") @db.Uuid

  @@unique([projectId, fieldId])
  @@map("project_fields")
}

model Student {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique @db.VarChar(255)

  // StudyLevel 1:M Student
  level        StudyLevel @relation(fields: [studyLevelId], references: [id])
  studyLevelId String     @map("study_level_id") @db.Uuid

  // Project 1:M Student
  Project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id") @db.Uuid

  @@map("students")
}
